# Production Docker Compose Configuration
# This is an alternative compose file optimized for production environments
# Usage: docker-compose -f production.yml up -d

version: '3.8'

services:
  # PostgreSQL Database with production optimizations
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: visuogen
      POSTGRES_USER: visuogen
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Production optimizations
      POSTGRES_SHARED_PRELOAD_LIBRARIES: 'pg_stat_statements'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./postgres.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    networks:
      - visuogen-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U visuogen -d visuogen"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis with persistence and security
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    networks:
      - visuogen-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # VisuoGen Application with production optimizations
  visuogen:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      
      # Database configuration
      DATABASE_URL: postgresql://visuogen:${POSTGRES_PASSWORD}@postgres:5432/visuogen
      DATABASE_MAX_CONNECTIONS: 20
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # Performance optimizations
      NODE_OPTIONS: "--max-old-space-size=2048"
      UV_THREADPOOL_SIZE: 16
      
      # Security
      SESSION_SECRET: ${SESSION_SECRET}
      REPL_ID: ${REPL_ID}
      ISSUER_URL: ${ISSUER_URL}
      REPLIT_DOMAINS: ${REPLIT_DOMAINS}
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MODELSLAB_API_KEY: ${MODELSLAB_API_KEY}
      REPLICATE_API_TOKEN: ${REPLICATE_API_TOKEN}
      STABILITY_API_KEY: ${STABILITY_API_KEY}
      PIAPI_API_KEY: ${PIAPI_API_KEY}
      CLIPDROP_API_KEY: ${CLIPDROP_API_KEY}
      
      # Payment
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      VITE_STRIPE_PUBLIC_KEY: ${VITE_STRIPE_PUBLIC_KEY}
      
      # Storage
      BUNNY_STORAGE_ZONE: ${BUNNY_STORAGE_ZONE}
      BUNNY_ACCESS_KEY: ${BUNNY_ACCESS_KEY}
      BUNNY_HOSTNAME: ${BUNNY_HOSTNAME}
      
      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      
    ports:
      - "127.0.0.1:3000:5000"  # Only bind to localhost
    networks:
      - visuogen-network
    volumes:
      - app_logs:/app/logs
      - /tmp:/tmp  # For temporary file processing
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Nginx with production optimizations
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      - visuogen
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - /var/cache/nginx:/var/cache/nginx
    networks:
      - visuogen-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Log aggregator (optional)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.5.0
    restart: unless-stopped
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - visuogen-network
    depends_on:
      - visuogen
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/visuogen/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/visuogen/data/redis
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/visuogen/logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/visuogen/logs/nginx

networks:
  visuogen-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16